#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Enumeration for AST node types
typedef enum {
  AST_INT,
  AST_FLOAT,
  AST_PLUS,
  AST_MINUS,
  AST_MULTIPLY,
  AST_DIVIDE,
  // Add additional types as needed
} ASTNodeType;

// Structure for AST nodes
typedef struct {
  ASTNodeType type;
  union {
    int int_value;
    float float_value;
    struct {
      struct ASTNode *left;
      struct ASTNode *right;
    } binary_operator;
  };
} ASTNode;

// Structure for intermediate code instructions
typedef struct {
  char *op;
  char *arg1;
  char *arg2;
  char *result;
} Instruction;

// Array for storing intermediate code instructions
Instruction *instructions;
int num_instructions;
int max_instructions;

// Temporary variable counter for generating unique variables
int temp_var_counter;

// Generate a new temporary variable
char *new_temp_var() {
  char *temp_var = malloc(32 * sizeof(char));
  snprintf(temp_var, 32, "temp%d", temp_var_counter);
  temp_var_counter++;
  return temp_var;
}

// Add an instruction to the intermediate code array
void add_instruction(char *op, char *arg1, char *arg2, char *result) {
  // Check if the instruction array is full
  if (num_instructions == max_instructions) {
    // Increase the capacity of the instruction array
    max_instructions *= 2;
    instructions = realloc(instructions, max_instructions * sizeof(Instruction));
  }

  // Add the instruction to the instruction array
  instructions[num_instructions].op = strdup(op);
  instructions[num_instructions].arg1 = strdup(arg1);
  instructions[num_instructions].arg2 = strdup(arg2);
  instructions[num_instructions].result = strdup(result



void generate_intermediate_code(ASTNode *node) {
  // Generate intermediate code for the left and right operands
  generate_intermediate_code(node->left);
  generate_intermediate_code(node->right);
  // Generate intermediate code for the operation
  switch (node->type) {
    case BINARY_PLUS:
      printf("ADD %s, %s\n", node->left->result, node->right->result);
      break;
    case BINARY_MINUS:
      printf("SUB %s, %s\n", node->left->result, node->right->result);
      break;
    case BINARY_MULTIPLY:
      printf("MUL %s, %s\n", node->left->result, node->right->result);
      break;
    case BINARY_DIVIDE:
      printf("DIV %s, %s\n", node->left->result, node->right->result);
      break;
    // Add additional cases as needed
  }
  // Update the result field of the node
  sprintf(node->result, "t%d", temp_count++);
  // Update the type field of the node
  node->data_type = INT;
}
